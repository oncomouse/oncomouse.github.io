{"version":3,"sources":["day04/ISSPeople.module.scss","day04/ISSPosition.module.scss","day04/ISSPeople.js","utilities/useInterval.js","day04/ISSPosition.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","peopleList","container","ISSPeople","_useState","useState","_useState2","Object","slicedToArray","people","setPeople","useEffect","fetch","then","response","json","react_default","a","createElement","className","styles","map","person","i","key","href","concat","name","replace","useInterval","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","colors","CustomPolyLine","props","position","setCenter","positions","setPositions","previousLong","append","toConsumableArray","init","compose","last","LayerGroup","line","Polyline","color","index","ISSPosition","_useState3","_useState4","setPosition","_useState5","_useState6","zoom","setZoom","_useState7","_useState8","center","getISSPosition","cb","arguments","length","undefined","parseFloat","iss_position","latitude","longitude","Map","onZoomEnd","ev","target","getZoom","onMoveEnd","getCenter","animate","TileLayer","url","attribution","ISSPosition_CustomPolyLine","Marker","icon","Icon","iconUrl","iconSize","iconAnchor","Popup","App","day04_ISSPosition","day04_ISSPeople","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cc986077.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"peopleList\":\"ISSPeople_peopleList__29Mdh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ISSPosition_container__2LU6P\"};","// http://api.open-notify.org/iss-now.json\n// http://api.open-notify.org/astros.json\nimport fetch from 'isomorphic-fetch';\nimport React, { useEffect, useState } from 'react';\nimport styles from './ISSPeople.module.scss'\n\nconst url = 'http://api.open-notify.org/astros.json';\n\nconst ISSPeople = () => {\n  const [people, setPeople] = useState([]);\n\n  useEffect(() => {\n    fetch(url)\n      .then((response) => response.json())\n      .then((json) => {\n        setPeople(json.people)\n      })\n  }, [])\n\n  return (\n    <ul className={styles.peopleList}>\n      {people.map((person, i) => <li key={i}><a href={`https://en.wikipedia.org/wiki/${person.name.replace(/\\s+/g,'_')}`}>{person.name}</a></li>)}\n    </ul>\n  )\n}\n\nexport default ISSPeople;","import { useEffect, useRef } from 'react';\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;","import React, { useState, useEffect, useRef } from 'react';\nimport { Icon } from 'leaflet';\nimport { Map, LayerGroup, Marker, Popup, TileLayer, Polyline } from 'react-leaflet';\nimport { append, compose, init, last, range, map } from 'ramda';\nimport useInterval from '../utilities/useInterval';\nimport styles from './ISSPosition.module.scss';\n\nconst DEBUG = false;\n\nconst colors = [\n  '#001f3f',\n  '#0074D9',\n  '#7FDBFF',\n  '#39CCCC',\n  '#3D9970',\n  '#2ECC40',\n  '#01FF70',\n  '#FFDC00',\n  '#FF851B',\n  '#FF4136',\n  '#85144b',\n  '#F012BE',\n  '#B10DC9',\n  '#111111',\n  '#AAAAAA',\n  '#DDDDDD'\n];\n\nconst indexToColor = index => colors[index >= 16 ? index % 16 : index];\n\nconst CustomPolyLine = (props) => {\n  const {\n    position,\n    setCenter\n  } = props;\n\n  const [positions, setPositions] = useState([[]]);\n  const previousLong = useRef(null);\n\n  useEffect(() => {\n    if (typeof previousLong.current === 'number' && previousLong.current > 150 && position[1] < -150) {\n      setPositions(append([position]));\n      setCenter(position);\n    } else {\n      setPositions(positions => [\n        ...init(positions),\n        compose(append(position), last)(positions)\n      ])\n    }\n    previousLong.current = position[1];\n  }, [position]);\n  return <LayerGroup>{positions.map((line, i) => <Polyline color={indexToColor(i)} positions={line} key={i} />)}</LayerGroup>\n}\n\n// const dummyPositions = [\n//   ...map(i => [30, 174 + (i / 10)])(range(0, 40)),\n//   ...map(i => [30, -180 + (i / 10)])(range(1, 21))\n// ];\n\nconst ISSPosition = () => {\n  const [position, setPosition] = useState(null);\n  const [zoom, setZoom] = useState(3);\n  const [center, setCenter] = useState([0, 0]);\n  // const debugPosition = useRef(0);\n\n  const getISSPosition = (cb=()=>true) => {\n    if(DEBUG) {\n      // if(debugPosition.current < dummyPositions.length) {\n      //   const position = dummyPositions[debugPosition.current];\n      //   setPosition(position);\n      //   debugPosition.current++;\n      //   cb(position);\n      // }\n    }\n    else {\n      fetch('http://api.open-notify.org/iss-now.json')\n        .then(response => response.json())\n        .then(json => [\n          parseFloat(json.iss_position.latitude, 10),\n          parseFloat(json.iss_position.longitude, 10) // -180 is international\n        ]).then(position => {\n          setPosition(position);\n          return position;\n        })\n        .then(cb)\n    }\n  };\n\n  useEffect(() => getISSPosition(setCenter), []);\n  useInterval(getISSPosition, 500);\n\n  const onZoomEnd = ev => setZoom(ev.target.getZoom());\n  const onMoveEnd = ev => setCenter(ev.target.getCenter())\n  return position === null ? null : (\n    <Map\n      onZoomEnd={onZoomEnd}\n      onMoveEnd={onMoveEnd}\n      animate={true}\n      className={styles.container}\n      center={center}\n      zoom={zoom}\n    >\n      <TileLayer\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n      />\n      <CustomPolyLine position={position} setCenter={setCenter} />\n      <Marker position={position} icon={new Icon({\n        iconUrl: 'https://static.wixstatic.com/media/5bc9ff_a6d47cc01cd549cbbca14c16a764affa~mv2.png/v1/fill/w_1075,h_428,al_c,lg_1,q_85/international-space-station-png-2.webp',\n        iconSize: [75, 30],\n        iconAnchor: [25, 15],\n      })}>\n        <Popup>A pretty CSS3 popup.<br />Easily customizable.</Popup>\n      </Marker>\n    </Map>\n  );\n}\n\nexport default ISSPosition;","import React, { useState } from 'react';\nimport ISSPeople from './day04/ISSPeople';\nimport ISSPosition from './day04/ISSPosition';\n\nconst App = () => {\n  const [names, setNames] = useState([])\n\n  return (\n    <div>\n      <h1 className=\"ta-center\">ISS Information</h1>\n      <ISSPosition />\n      <h2 className=\"ta-center\">Who's Currently on the ISS?</h2>\n      <div className=\"wrapper-small\">\n        <ISSPeople url=\"http://api.open-notify.org/astros.json\" />\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
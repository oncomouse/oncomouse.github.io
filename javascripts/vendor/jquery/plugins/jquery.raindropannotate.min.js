(function( $ ) {
	$.raindrop = function(options) {
		
		/*
		 * Legacy mode is annotation code formatted to work without support for javascript
		 * or in browsers without modern features (old IE, etc). The issue with legacy mode
		 * lies in it being more involved HTML.
		 * 
		 * legacy mode reference format:
		 *
		 *  <span class="annotation reference">
		 *	  <a href="#content-id" name="content-backlink-name">Reference Text</a>
		 *  </span>
		 * 
		 * legacy mode content format:
		 *
		 *  <div class="anotation content" id="content-id">
		 *  	<p>Content Text <a href="#content-backlink-name">↩</a></p>
		 *  </div>
		 *
		 * No legacy mode reference format:
		 *  <span class="annotation reference" data-content="content-id">Reference Text</span>
		 *
		 * No legacy mode content format:
		 *
		 *  <div class="annotation content" id="content-id">
		 *  	<p>Content Text.</p>
		 *  </div>
		 */
		
		var settings = $.extend({
			 fleuron			: '❧',
			 legacyMode			: true, // set to false to disable support for legacy HTML
			 footnoteMode		: false, // set to true to support standard HTML footnotes
			 containerSelectors	: {
			 	text: "#text",
				annotations: "#annotations",
				container: "#annotated-text"
			 },
			 classes			: {
			 	applicationReady	: 'ready',
				hoverLinks			: 'hover',
				activeLinks			: 'active',
				raindropContainer	: 'raindrop-container',
				raindropAnnotations	: 'raindrop-annotations',
				raindropText		: 'raindrop-text'
			 },
			 onReady			: undefined
			 
		}, options);

		var processNotesForBigfoot = function(target) {
			target = target || settings.containerSelectors.text;
			
			var $footnote_storage = $('<div class="footnotes"><ol id="footnote-list"></ol></div>');
			$(settings.containerSelectors.container).append($footnote_storage);
			$footnote_storage = $('#footnote-list');
			
			$(target).addClass('no-fn');
			
			$(target + ' .annotation.reference').each(function(i, annotation) {
				annotation = $(annotation)
				var reference = annotation;
				var content;
				if (settings.legacyMode) {
					content = $(reference.find('a').eq(0).attr('href'));
				} else {
					content = $('#' + reference.attr('data-content'));
				}

				var footnote_reference = $('<sup id="fnref:' + (i + 1) + '"><a href="#fn:' + (i + 1) + '" rel="footnote">' + i + '</a></sup>');
				var footnote_content = $('<li class="footnote" id="fn:' + (i + 1) + '">' + content.html() + '</li>');
				reference.append(footnote_reference);
				$footnote_storage.append(footnote_content);
			});
		}; //processNotesForBigfoot()
		
		var callBigfoot = function() {
			$.bigfoot({
				useFootnoteOnlyOnce: false,
				appendPopoversTo: "body"
			});
		}; // callBigfoot()
		
		var removeBigfootLinks = function(target) {
			target = target || settings.containerSelectors.text;
			if($('.footnote-button').length == 0) {
				setTimeout(removeBigfootLinks, 100);
				return;
			}
		
			$(target + ' .annotation.reference').each(function(i,annotation) {
				var $annotation = $(annotation);
				if ($annotation.prop('data-annotation-seen')) { return; }
				var $link,$original_link,$content;
				if(settings.legacyMode) {
					$link=$annotation.find('a').eq(1);
					$original_link=$annotation.find('a').eq(0),
					$content=$($original_link.attr('href'));
					$link.html($original_link.html());
					$original_link.remove();
				} else {
					$link=$annotation.find('a').eq(0);
					$content=$('#' + $annotation.attr('data-content'));
					var $clone = $annotation.clone();
					$clone.find('a').replaceWith('');
					$link.html($clone.html());
					//$annotation.html($link.html());
					$annotation.html($link);
					//$link.html($annotation.html().replace(/<a>[^<]+<\/a>/,""));
				}
				$annotation.find('sup').remove();
				$annotation.prop('data-annotation-seen', true);
				$content.remove();
			}); //$('.annotation.reference').each()
		
			$(target + ' p').each(function(i,paragraph) {
				if($(paragraph).parent().hasClass('annotation content')) { return; }
				var $annotate = $('<div class="annotate"></div>');
				$annotate.html('<ul></ul>');
				var number_of_annotations = $('.footnote-button').length;
				$(paragraph).find('a').each(function(j, link) {
					if(!$(link).hasClass('footnote-button')) { return; }
					var annotate_link = $(link).clone();
				
					/*
					 * You have to separate data-* elements for each footnote (even if you
					 * are using the multiple FN option). The reason for this is that bigfoot
					 * always grabs the first footnote that matches the data-footnote-identifier
					 * it is looking for. By renumbering the sidebar annotations, we can have
					 * shared content but different footnotes.
					 */
				
					annotate_link.attr('data-footnote-number', (parseInt(annotate_link.attr("data-footnote-number")) + number_of_annotations));
					annotate_link.attr('id', 'fnref:' + annotate_link.attr("data-footnote-number"));
					annotate_link.attr('data-original-footnote-identifier', annotate_link.attr("data-footnote-identifier"));
					annotate_link.attr('data-footnote-identifier', parseInt(annotate_link.attr("data-footnote-identifier")) + number_of_annotations);				
					
				
					annotate_link.html(settings.fleuron);
					annotate_link.on({
						"mouseover.annotation": function() {
							$(link).addClass(settings.classes.activeLinks);
						},
						" mouseout.annotation": function() {
							$(link).removeClass(settings.classes.activeLinks);
						}
					});
					$annotate.find('ul').append($('<li></li>').append(annotate_link));
				}); // $(paragraph).find('a').each()
				
				$(settings.containerSelectors.annotations).append($annotate);
				$(paragraph).attr('data-ordinal', i);
				$annotate.attr('data-ordinal', i);
				$annotate.on({
					"mouseover.annotation": function() {
						$(settings.containerSelectors.text + ' p').eq(parseInt($(this).attr('data-ordinal'))).addClass(settings.classes.hoverLinks);
					},
					" mouseout.annotation": function() {
						$(settings.containerSelectors.text + ' p').eq(parseInt($(this).attr('data-ordinal'))).removeClass(settings.classes.hoverLinks);
					}
				}); // $annotate.on()
				
				$(paragraph).on({
					"mouseover.annotation": function() {
						$(this).addClass(settings.classes.hoverLinks);
					},
					" mouseout.annotation": function() {
						$(this).removeClass(settings.classes.hoverLinks);
					},
					"inview.annotation": function(e, isVisible) {								
						$annotate.toggleClass('visible',isVisible);
					}
				}); //$(paragraph).on()
			}); // $('#text p').each()
		
			repositionAnnotations();
			$(settings.containerSelectors.annotations + ' .footnote-button').html(settings.fleuron); 
		
			$(settings.containerSelectors.container).addClass(settings.classes.containerReady);
		}; // removeBigfootLinks()
		
		var repositionAnnotations = function() {
			$(settings.containerSelectors.annotations + ' .annotate').each(function(i, annotate) {
				var $annotate = $(annotate);
				if ($annotate.find('a').length == 0) { return; }
				var $paragraph = $("p[data-ordinal='" + $annotate.attr('data-ordinal') + "']");
				$annotate.height($paragraph.outerHeight());
				$annotate.css('top', $paragraph.offset().top);
				
				$annotate.find('a.footnote-button').each(function(i, link) {
					var $link = $(link);
					var $text_link = $("#fnref\\\:" + $link.attr('data-original-footnote-identifier'));
					$link.css({
					left: $text_link.position().left * $(settings.containerSelectors.annotations).width() / $(settings.containerSelectors.container).width(),
					top: $text_link.position().top
				});
				})
			});
		};
		
		var startAnnotations = function(target) {
			target = target || settings.containerSelectors.text;
			
			if(!settings.footnoteMode) {
				processNotesForBigfoot(target);
			}
			callBigfoot(target);
			removeBigfootLinks(target);
			
			
		};
		
		$(document).ready(function() {
			$(settings.containerSelectors.container).addClass(settings.classes.raindropContainer);
			$(settings.containerSelectors.annotations).addClass(settings.classes.raindropAnnotations);
			$(settings.containerSelectors.text).addClass(settings.classes.raindropText);
			
			startAnnotations();
			
			$(settings.containerSelectors.container).addClass(settings.classes.applicationReady);
			
			$(window).on('resize', repositionAnnotations);
			
			if(typeof settings.onReady === "function") {
				settings.onReady();
			}
		});
		
		return {
			redraw: function() {repositionAnnotations(); },
			scan: function(target) { startAnnotations(target); }
		};
	}
}( jQuery ));
